.TH "SALT-API" "7" "January 21, 2013" "0.7.5" "salt-api"
.SH NAME
salt-api \- salt-api Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.sp
\fBsalt\-api\fP is a modular interface on top of \fI\%Salt\fP that can provide a
variety of entry points into a running Salt system. It can start and manage
multiple interfaces allowing a REST API to coexist with XMLRPC or even a
Websocket API.
.SH GETTING STARTED
.sp
Running \fBsalt\-api\fP will automatically start any netapi modules that
have been configured in your Salt master config file. Consult the documentation
for each netapi module for what options are required. \fBsalt\-api\fP must
be run on the same machine as your Salt master.
.SH NETAPI MODULES
.sp
The core functionality for \fBsalt\-api\fP lies in pluggable netapi modules
that adhere to the simple interface of binding to a port and starting a
service.
.SS Introduction to netapi modules
.sp
netapi modules simply bind to a port and start a service. They are enabled by
specifying the name of a netapi module and the port to bind in the master
config file.
.sp
Communication with Salt and Salt satelite projects is done by passing a list of
low\-data dictionaries to a client interface. Low\-data is a dictionary that
specifies the client, the function inside that client to execute, and any
additional arguments or parameters.
.SS Client interfaces
.INDENT 0.0
.TP
.B class saltapi.APIClient(opts)
Provide a uniform method of accessing the various client interfaces in Salt
in the form of low\-data data structures. For example:
.sp
.nf
.ft C
>>> client = APIClient(__opts__)
>>> lowdata = {\(aqclient\(aq: \(aqlocal\(aq, \(aqtgt\(aq: \(aq*\(aq, \(aqfun\(aq: \(aqtest.ping\(aq, \(aqarg\(aq: \(aq\(aq}
>>> client.run(lowdata)
.ft P
.fi
.INDENT 7.0
.TP
.B local(*args, **kwargs)
Wrap LocalClient for running \fI\%execution modules\fP
.UNINDENT
.INDENT 7.0
.TP
.B runner(fun, **kwargs)
Wrap RunnerClient for executing \fI\%runner modules\fP
.UNINDENT
.INDENT 7.0
.TP
.B wheel(fun, **kwargs)
Wrap Wheel to enable executing \fI\%wheel modules\fP
.UNINDENT
.UNINDENT
.SS Writing netapi modules
.sp
\fBnetapi\fP modules, put simply, bind a port and start a service.
They are purposefully open\-ended and can be used to present a variety of
external interfaces to Salt, and even present multiple interfaces at once.
.IP "See also"
.sp
\fIThe full list of netapi modules\fP
.RE
.SS Configuration
.sp
All \fBnetapi\fP configuration is done in the \fI\%Salt master
config\fP and takes a form similar to the following:
.sp
.nf
.ft C
rest_cherrypy:
  port: 8000
  debug: True
  ssl_crt: /etc/pki/tls/certs/localhost.crt
  ssl_key: /etc/pki/tls/certs/localhost.key
.ft P
.fi
.SS The \fB__virtual__\fP function
.sp
Like all module types in Salt, \fBnetapi\fP modules go through
Salt\(aqs loader interface to determine if they should be loaded into memory and
then executed.
.sp
The \fB__virtual__\fP function in the module makes this determination and should
return \fBFalse\fP or a string that will serve as the name of the module. If the
module raises an \fBImportError\fP or any other errors, it will not be loaded.
.SS The \fBstart\fP function
.sp
The \fBstart()\fP function will be called for each \fBnetapi\fP
module that is loaded. This function should contain the server loop that
actually starts the service. This is started in a multiprocess.
.SS Inline documentation
.sp
As with the rest of Salt, it is a best\-practice to include liberal inline
documentation in the form of a module docstring and docstrings on any classes,
methods, and functions in your \fBnetapi\fP module.
.SS Loader “magic” methods
.sp
The loader makes the \fB__opts__\fP datastructure available to any function in
a \fBnetapi\fP module.
.SS Full list of netapi modules
.SS Full list of netapi modules
.SS rest_cherrypy
.sp
A hypermedia REST API for Salt using the CherryPy framework
.INDENT 0.0
.TP
.B depends
.INDENT 7.0
.IP \(bu 2
CherryPy Python module
.UNINDENT
.TP
.B configuration
The master config may contain the following options:
.INDENT 7.0
.TP
.B port
Required
.TP
.B debug
\fBFalse\fP
Used during development; does not use SSL
.TP
.B ssl_crt
Required when \fBdebug\fP is \fBFalse\fP
.TP
.B ssl_key
Required when \fBdebug\fP is \fBFalse\fP
.TP
.B static
A filesystem path to static HTML/JavaScript/CSS/image assets.
If this directory contains a \fBindex.html\fP file, it will be served at
the root URL when HTML is requested by a client via the \fBAccept\fP
header.
.sp
This directory may point to a clone of the \fI\%salt-ui\fP project to
bootstrap a graphical interface for interacting with Salt.
.UNINDENT
.sp
For example:
.sp
.nf
.ft C
rest_cherrypy:
  port: 8000
  ssl_crt: /etc/pki/tls/certs/localhost.crt
  ssl_key: /etc/pki/tls/certs/localhost.key
.ft P
.fi
.sp
The REST interface requires a secure HTTPS connection. You must provide an
SSL certificate to use. If you don\(aqt already have a certificate and don\(aqt
wish to buy one, you can generate a self\-signed certificate using the
\fI\%create_self_signed_cert()\fP function in Salt (note
the dependencies for this module):
.sp
.nf
.ft C
% salt\-call tls.create_self_signed_cert
.ft P
.fi
.UNINDENT
.IP "Content negotiation"
.sp
You may request various output formats by sending the appropriate
\fIAccept\fP header. You may also send various formats in
\fI\%POST\fP and \fI\%PUT\fP requests by specifying the
\fIContent\-Type\fP.
.RE
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.LowDataAdapter(opts)
The primary purpose of this handler is to provide a RESTful API to execute
Salt client commands and return the response as a data structure.
.INDENT 7.0
.TP
.B Parameters
\fBopts\fP \-\- A dictionary of options from Salt\(aqs master config (e.g.
Salt\(aqs, \fB__opts__\fP)
.UNINDENT
.INDENT 7.0
.TP
.B GET()
The API entry point
.INDENT 7.0
.TP
.B GET /
An explanation of the API with links of where to go next.
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-i localhost:8000
.ft P
.fi
.sp
.nf
.ft C
GET / HTTP/1.1
Host: localhost:8000
Accept: application/json
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: application/json
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B POST(**kwargs)
The primary execution vector for the rest of the API
.INDENT 7.0
.TP
.B POST /
You must pass low\-data in the requst body either from an HTML form
or as JSON or YAML.
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-si https://localhost:8000 \e
        \-H "Accept: application/x\-yaml" \e
        \-H "X\-Auth\-Token: d40d1e1e" \e
        \-d client=local \e
        \-d tgt=\(aq*\(aq \e
        \-d fun=\(aqtest.ping\(aq \e
        \-d arg
.ft P
.fi
.sp
.nf
.ft C
POST / HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
X\-Auth\-Token: d40d1e1e
Content\-Length: 36
Content\-Type: application/x\-www\-form\-urlencoded

fun=test.ping&arg&client=local&tgt=*
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 200
Allow: GET, HEAD, POST
Content\-Type: application/x\-yaml

return:
\- ms\-0: true
  ms\-1: true
  ms\-2: true
  ms\-3: true
  ms\-4: true
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Form lowstate
lowstate data appropriate for the \fI\%client\fP interface you are calling.
.sp
Lowstate may be supplied in any supported format by specifying the
\fIContent\-Type\fP header in the request. Supported formats
are listed in the \fIAlternates\fP response header.
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.Login(opts)
All interactions with this REST API must be authenticated. Authentication
is performed through Salt\(aqs eauth system. You must set the eauth backend
and allowed users by editing the \fBexternal_auth\fP section in
your master config.
.sp
Authentication credentials are passed to the REST API via a session id in
one of two ways:
.sp
If the request is initiated from a browser it must pass a session id via a
cookie and that session must be valid and active.
.sp
If the request is initiated programmatically, the request must contain a
\fIX\-Auth\-Token\fP header with valid and active session id.
.INDENT 7.0
.TP
.B GET()
Present the login interface
.INDENT 7.0
.TP
.B GET /login
An explanation of how to log in.
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-i localhost:8000/login
.ft P
.fi
.sp
.nf
.ft C
GET /login HTTP/1.1
Host: localhost:8000
Accept: text/html
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Type: text/html
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B POST(**kwargs)
Authenticate against Salt\(aqs eauth system. Returns a session id and
redirects on success.
.INDENT 7.0
.TP
.B POST /login
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-si localhost:8000/login \e
        \-H "Accept: application/json" \e
        \-d username=\(aqsaltuser\(aq \e
        \-d password=\(aqsaltpass\(aq \e
        \-d eauth=\(aqpam\(aq
.ft P
.fi
.sp
.nf
.ft C
POST / HTTP/1.1
Host: localhost:8000
Content\-Length: 97
Content\-Type: application/x\-www\-form\-urlencoded

username=saltuser&password=saltpass&eauth=pam
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 302 Found
Content\-Length: 97
Location: http://localhost:8000/
X\-Auth\-Token: 6d1b722e
Set\-Cookie: session_id=6d1b722e; expires=Sat, 17 Nov 2012 03:23:52 GMT; Path=/
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Form eauth
the eauth backend configured in your master config
.TP
.B Form username
username
.TP
.B Form password
password
.TP
.B Status 302
success
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.Minions(opts)
.INDENT 7.0
.TP
.B GET(mid=None)
A convenience URL for getting lists of minions or getting minion
details
.INDENT 7.0
.TP
.B GET /minions/(mid)
Get grains, modules, functions, and inline function documentation
for all minions or a single minion
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-i localhost:8000/minions/ms\-3
.ft P
.fi
.sp
.nf
.ft C
GET /minions/ms\-3 HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 129005
Content\-Type: application/x\-yaml

return:
\- ms\-3:
    grains.items:
      ...
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBmid\fP \-\- (optional) a minion id
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B POST(**kwargs)
Start an execution command and immediately return the job id
.INDENT 7.0
.TP
.B POST /minions
You must pass low\-data in the requst body either from an HTML form
or as JSON or YAML. The \fBclient\fP option is pre\-set to
\fBlocal_async\fP.
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-sSi localhost:8000/minions \e
    \-H "Accept: application/x\-yaml" \e
    \-d tgt=\(aq*\(aq \e
    \-d fun=\(aqstatus.diskusage\(aq
.ft P
.fi
.sp
.nf
.ft C
POST /minions HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
Content\-Length: 26
Content\-Type: application/x\-www\-form\-urlencoded

tgt=*&fun=status.diskusage
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 202 Accepted
Content\-Length: 86
Content\-Type: application/x\-yaml

\- return:
    jid: \(aq20130118105423694155\(aq
    minions: [ms\-4, ms\-3, ms\-2, ms\-1, ms\-0]
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Form lowstate
lowstate data for the
\fBLocalClient\fP; the \fBclient\fP parameter will
be set to \fBlocal_async\fP
.sp
Lowstate may be supplied in any supported format by specifying the
\fIContent\-Type\fP header in the request. Supported formats
are listed in the \fIAlternates\fP response header.
.TP
.B Status 202
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested \fIContent\-Type\fP not available
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class saltapi.netapi.rest_cherrypy.Jobs(opts)
.INDENT 7.0
.TP
.B GET(jid=None)
A convenience URL for getting lists of previously run jobs or getting
the return from a single job
.INDENT 7.0
.TP
.B GET /jobs/(jid)
Get grains, modules, functions, and inline function documentation
for all minions or a single minion
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-i localhost:8000/jobs
.ft P
.fi
.sp
.nf
.ft C
GET /jobs HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 165
Content\-Type: application/x\-yaml

return:
\- \(aq20121130104633606931\(aq:
    Arguments:
    \- \(aq3\(aq
    Function: test.fib
    Start Time: 2012, Nov 30 10:46:33.606931
    Target: ms\-3
    Target\-type: glob
.ft P
.fi
.sp
\fBExample request\fP:
.sp
.nf
.ft C
% curl \-i localhost:8000/jobs/20121130104633606931
.ft P
.fi
.sp
.nf
.ft C
GET /jobs/20121130104633606931 HTTP/1.1
Host: localhost:8000
Accept: application/x\-yaml
.ft P
.fi
.sp
\fBExample response\fP:
.sp
.nf
.ft C
HTTP/1.1 200 OK
Content\-Length: 73
Content\-Type: application/x\-yaml

return:
\- ms\-3:
  \- \- 0
    \- 1
    \- 1
    \- 2
  \- 9.059906005859375e\-06
.ft P
.fi
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBmid\fP \-\- (optional) a minion id
.TP
.B Status 200
success
.TP
.B Status 401
authentication required
.TP
.B Status 406
requested Content\-Type not available
.UNINDENT
.UNINDENT
.UNINDENT
.SH RELEASES
.SS Release notes
.SS salt\-api 0.5.0
.sp
\fBsalt\-api\fP is gearing up for the initial public release with 0.5.0.
Although this release ships with working basic functionality it is awaiting the
authentication backend that will be introduced in Salt 0.10.4 before it can be
considered ready for testing at large.
.SS REST API
.sp
This release presents the flagship netapi module which provides a RESTful
interface to a running Salt system. It allows for viewing minions, runners, and
jobs as well as running execution modules and runners of a running Salt system
through a REST API that returns JSON.
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\fP on
Freenode.
.SS salt\-api 0.6.0
.sp
\fBsalt\-api\fP inches closer to prime\-time with 0.6.0. This release adds
the beginnings of a universal interface for accessing Salt components via the
tried and true method of passing low\-data to functions (a core component of
Salt\(aqs remote execution and state management).
.SS Low\-data interface
.sp
A new view accepts :\fI\%http:post\fP: requests at the root URL that accepts raw
low\-data as :\fI\%http:post\fP: data and passes that low\-data along to a client
interface in Salt. Currently only LocalClient and RunnerClient interfaces have
been implemented in Salt with more coming in the next Salt release.
.SS External authentication
.sp
Raw low\-data can contain authentication credentials that make use of Salt\(aqs new
\fBexternal_auth\fP system.
.sp
The following is a proof\-of\-concept of a working eauth call. (It bears
repeating this is a pre\-alpha release and this should not be used by anyone for
anything real.)
.sp
.nf
.ft C
% curl \-si localhost:8000 \e
    \-d client=local \e
    \-d tgt=\(aq*\(aq \e
    \-d fun=\(aqtest.ping\(aq \e
    \-d arg \e
    \-d eauth=pam \e
    \-d username=saltdev \e
    \-d password=saltdev
.ft P
.fi
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\-devel\fP on
Freenode.
.SS salt\-api 0.7.0
.sp
\fBsalt\-api\fP is ready for alpha\-testing in the real world. This release
solidifies how \fBsalt\-api\fP will communicate with the larger Salt
ecosystem. In addition authentication and encryption (via SSL) have been added.
.sp
The first netapi module was a proof of concept written in Flask. It was quite
useful to be able to quickly hammer out a URL structure and solidify on an
interface for programmatically calling out to Salt components. As of this
release that module has been deprecated and removed in favor of a netapi module
written in CherryPy. CherryPy affords tremendous flexibility when composing a
REST interface and will present a stable platform for building out a very
adaptable and featureful REST API—also we\(aqre using the excellent and fast
CherryPy webserver for securely serving the API.
.SS Low\-data interface
.sp
The last release introduced a proof\-of\-concept for how the various Salt
components will communicate with each other. This is done by passing a data
structure to a client interface. This release expands on that. There are
currently three client interfaces in Salt.
.IP "See also"
.sp
\fInetapi\-introduction\fP
.RE
.SS Encryption and authentication
.sp
Encryption has been added via SSL. You can supply an existing certificate or
generate a self\-signed certificate through Salt\(aqs \fI\%tls\fP
module.
.sp
Authentication is performed through Salt\(aqs incredibly flexible \fI\%external
auth\fP system and is maintained when accessing the API via session
tokens.
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\-devel\fP on
Freenode.
.SS salt\-api 0.7.5
.sp
This release is a mostly a minor release to pave a better path for
\fBsalt\-ui\fP though there are some small feature additions and bugfixes.
.SS Changes
.INDENT 0.0
.IP \(bu 2
Convenience URLs \fB/minions\fP and \fB/jobs\fP have been added as well as a
async client wrapper. This starts a job and immediately returns the job ID,
allowing you to fetch the result of that job at a later time.
.IP \(bu 2
The return format will now default to JSON if no specific format is
requested.
.IP \(bu 2
A new setting \fBstatic\fP has been added that will serve any static media from
the directory specified. In addition if an \fBindex.html\fP file is found
in that directory and the \fBAccept\fP header in the request prefer HTML that
file will be served.
.IP \(bu 2
All HTML, including the login form, has been removed from \fBsalt\-api\fP
and moved into the \fBsalt\-ui\fP project.
.IP \(bu 2
Sessions now live as long as the Salt token.
.UNINDENT
.SS Participation
.sp
\fBsalt\-api\fP is just getting off the ground so feedback, questions, and
ideas are critical as we solidify how this project fits into the overall Salt
infrastructure management stack. Please get involved by \fI\%filing issues\fP on
GitHub, \fI\%discussing on the mailing list\fP, and chatting in \fB#salt\-devel\fP on
Freenode.
.SH REFERENCE
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.IP \(bu 2
\fIglossary\fP
.UNINDENT
.SH AUTHOR
Thomas S. Hatch <thatch45@gmail.com> and many others, please see the Authors file
.SH COPYRIGHT
2012, Thomas S. Hatch
.\" Generated by docutils manpage writer.
.\" 
.
